import java.io.BufferedReader;

import java.io.BufferedWriter;

import java.io.InputStreamReader;

import java.io.OutputStreamWriter;

import java.net.HttpURLConnection;

import java.net.URL;

import java.util.HashMap;

​

import org.json.JSONObject;

import org.springframework.stereotype.Controller;

import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.ResponseBody;

​

import com.fasterxml.jackson.databind.ObjectMapper;

​

​

public String restApiGetWeather() throws Exception {

        /* 

            @ API LIST ~

            getUltraSrtNcst 초단기 실황 조회 

            getUltraSrtFcst 초단기 예보 조회 

            getVilageFcst 동네예보 조회 - 현재 사용 중인 url

            getFcstVersion 예보 버전 조회

        */

        String url = "http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getVilageFcst"

            + "?serviceKey=복사한 키 여기다가 붙여넣기"

            + "&dataType=JSON"            // JSON, XML

            + "&numOfRows=10"             // 페이지 ROWS

            + "&pageNo=1"                 // 페이지 번호

            + "&base_date=20210925"       // 발표 일자

            + "&base_time=0800"           // 발표 시각

            + "&nx=60"                    // 예보 지점 X 좌표

            + "&ny=127";                  // 예보 지점 Y 좌표

         

        HashMap<String, Object> resultMap = getDataFromJson(url, "UTF-8", "get", "");

        

        System.out.println("# RESULT : " + resultMap);

​

        JSONObject jsonObj = new JSONObject();

        

        jsonObj.put("result", resultMap);

        

        return jsonObj.toString();

    }

    

    public HashMap<String, Object> getDataFromJson(String url, String encoding, String type, String jsonStr) throws Exception {

        boolean isPost = false;

​

        if ("post".equals(type)) {

            isPost = true;

        } else {

            url = "".equals(jsonStr) ? url : url + "?request=" + jsonStr;

        }

​

        return getStringFromURL(url, encoding, isPost, jsonStr, "application/json");

    }

    

    public HashMap<String, Object> getStringFromURL(String url, String encoding, boolean isPost, String parameter, String contentType) throws Exception {

        URL apiURL = new URL(url);

​

        HttpURLConnection conn = null;

        BufferedReader br = null;

        BufferedWriter bw = null;

​

        HashMap<String, Object> resultMap = new HashMap<String, Object>();

​

        try {

            conn = (HttpURLConnection) apiURL.openConnection();

            conn.setConnectTimeout(5000);

            conn.setReadTimeout(5000);

            conn.setDoOutput(true);

​

            if (isPost) {

                conn.setRequestMethod("POST");

                conn.setRequestProperty("Content-Type", contentType);

                conn.setRequestProperty("Accept", "*/*");

            } else {

                conn.setRequestMethod("GET");

            }

​

            conn.connect();

​

            if (isPost) {

                bw = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream(), "UTF-8"));

                bw.write(parameter);

                bw.flush();

                bw = null;

            }

​

            br = new BufferedReader(new InputStreamReader(conn.getInputStream(), encoding));

​

            String line = null;

​

            StringBuffer result = new StringBuffer();

​

            while ((line=br.readLine()) != null) result.append(line);

​

            ObjectMapper mapper = new ObjectMapper();

​

            resultMap = mapper.readValue(result.toString(), HashMap.class);

        } catch (Exception e) {

            e.printStackTrace();

            throw new Exception(url + " interface failed" + e.toString());

        } finally {

            if (conn != null) conn.disconnect();

            if (br != null) br.close();

            if (bw != null) bw.close();

        }

​

        return resultMap;

    }

<script type="text/javascript">

        $(document).ready(function () {

            $("#getWeatherButton").click(function () {

                getWeather();

            });

        });

​

        function getWeather() {

            $.ajax({

                url: "/weather/come",

                type: "get",

                timeout: 30000,

                contentType: "application/json",

                dataType: "json",

                success: function (data, status, xhr) {

                    let dataHeader = data.result.response.header.resultsCode;

​

                    if (dataHeader === "00") {

                        console.log("success == >");

                        console.log(data);

​

                        // 데이터를 화면에 표시

                        displayWeatherData(data.result.response.body.items.item);

                    } else {

                        console.log("fail == >");

                        console.log(data);

                    }

                },

                error: function (e, status, xhr, data) {

                    console.log("error == >");

                    console.log(e);

                }

            });

        }

​

        function displayWeatherData(items) {

            // 결과를 표시할 위치

            let resultContainer = $("#weatherResult");

​

            // 이전에 표시된 내용 제거

            resultContainer.empty();

​

            // 각 항목을 결과 컨테이너에 추가

            items.forEach(function (item) {

             let info = item.category;

                let dataValue = item.fcstValue;

                

             switch (info) {

                case "TMP":

                    info = "기온";

                    dataValue = dataValue + " ℃";

                    break;

                case "UUU":

                    info = "동서 성분 풍속";

                    dataValue = dataValue + " m/s";

                    break;

                case "VVV":

                    info = "남북 성분 풍속";

                    dataValue = dataValue + " m/s";

                    break;

                case "VEC":

                    info = "풍향";

                    dataValue = dataValue + " ℃";

                    break;

                case "WSD":

                    info = "풍속";

                    dataValue = dataValue + " m/s";

                    break;

                case "SKY":

                    info = "하늘 상태";

                    // 조건에 따라 SKY 값 변경

                    switch (dataValue) {

                        case "1":

                            dataValue = "맑음";

                            break;

                        case "2":

                            dataValue = "비";

                            break;

                        case "3":

                            dataValue = "구름 많음";

                            break;

                        // 다른 조건들 추가

                        default:

                            break;

                    }

                    break;

                case "PTY":

                    info = "강수형태";

                    // 조건에 따라 PTY 값 변경

                    switch (dataValue) {

                        case "0":

                            dataValue = "없음";

                            break;

                        case "1":

                            dataValue = "비";

                            break;

                        case "2":

                            dataValue = "눈/비";

                            break;

                        case "3":

                            dataValue = "눈";

                            break;

                        // 다른 조건들 추가

                        default:

                            break;

                    }

                    break;

                case "POP":

                    info = "강수확률";

                    dataValue = dataValue + " %";

                    break;

                case "WAV":

                    info = "파고";

                    dataValue = dataValue + " m";

                    break;

                case "PCP":

                    info = "강수량";

                    // 조건에 따라 PCP 값 변경

                    switch (dataValue) {

                        case "0":

                            dataValue = "강수 없음";

                            break;

                        // 다른 조건들 추가

                        default:

                            break;

                    }

                    break;

                // 다른 항목들도 추가

                default:

                    break;

            }

                resultContainer.append("<div class='weatherItem'>" + info + " : " + dataValue + "</div>");

            });

        }

    </script>

<button id="getWeatherButton">날씨 현황</button>

<div id="weatherResult"></div>
